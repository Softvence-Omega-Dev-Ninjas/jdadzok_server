name: üöÄ CD Pipeline with Zero Downtime

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
  push:
    branches:
      # - main
      - sabbir

# üåç Global ENV variables
env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  NODE_ENV: ${{ secrets.NODE_ENV }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
  BASE_URL: ${{ secrets.BASE_URL }}
  MAIL_USER: ${{ secrets.MAIL_USER }}
  MAIL_PASS: ${{ secrets.MAIL_PASS }}
  SUPER_ADMIN_EMAIL: ${{ secrets.SUPER_ADMIN_EMAIL }}
  SUPER_ADMIN_PASS: ${{ secrets.SUPER_ADMIN_PASS }}
  REDIS_URL: ${{ secrets.REDIS_URL }}
  TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
  TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
  TWILIO_PHONE_NUMBER: ${{ secrets.TWILIO_PHONE_NUMBER }}

jobs:
  build-and-push:
    name: Build & Push Docker Image üèóÔ∏è
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

    outputs:
      package_name: ${{ steps.package.outputs.package_name }}
      package_version: ${{ steps.package.outputs.package_version }}
      image_tag: ${{ steps.package.outputs.image_tag }}

    steps:
      - name: Checkout Code üì•
        uses: actions/checkout@v4

      - name: Log in to Docker Hub üîë
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin

      - name: Extract Package Name & Version üì¶
        id: package
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          IMAGE_TAG="${{ env.DOCKER_USERNAME }}/${PACKAGE_NAME}:${PACKAGE_VERSION}"

          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create .env file üìÑ
        run: |
          cat <<EOF > .env
          PACKAGE_NAME=${{ steps.package.outputs.package_name }}
          PACKAGE_VERSION=${{ steps.package.outputs.package_version }}
          DOCKER_USERNAME=${{ env.DOCKER_USERNAME }}
          NODE_ENV=${{ env.NODE_ENV }}
          DATABASE_URL=${{ env.DATABASE_URL }}
          JWT_SECRET=${{ env.JWT_SECRET }}
          JWT_EXPIRES_IN=${{ env.JWT_EXPIRES_IN }}
          BASE_URL=${{ env.BASE_URL }}
          MAIL_USER=${{ env.MAIL_USER }}
          MAIL_PASS=${{ env.MAIL_PASS }}
          SUPER_ADMIN_EMAIL=${{ env.SUPER_ADMIN_EMAIL }}
          SUPER_ADMIN_PASS=${{ env.SUPER_ADMIN_PASS }}
          REDIS_URL=${{ env.REDIS_URL }}
          TWILIO_ACCOUNT_SID=${{ env.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN=${{ env.TWILIO_AUTH_TOKEN }}
          TWILIO_PHONE_NUMBER=${{ env.TWILIO_PHONE_NUMBER }}
          EOF

      - name: Build Docker Image üî®
        run: docker compose --profile prod build

      - name: Push Docker Image üöÄ
        run: |
          docker compose --profile prod push
          echo "‚úÖ Docker image ${{ steps.package.outputs.image_tag }} pushed successfully!"

      - name: Clean up .env üßπ
        if: always()
        run: rm -f .env

  deploy:
    name: Deploy to the VPS with Zero Downtime üîÑ
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: ${{ needs.build-and-push.outputs.package_name }}
      PACKAGE_VERSION: ${{ needs.build-and-push.outputs.package_version }}
      IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}

    steps:
      - name: Checkout Code üì•
        uses: actions/checkout@v4

      - name: Extract Package Info üì¶
        id: package
        run: |
          PACKAGE_NAME=${{ needs.build-and-push.outputs.package_name }}
          PACKAGE_VERSION=${{ needs.build-and-push.outputs.package_version }}
          IMAGE_TAG=${{ needs.build-and-push.outputs.image_tag }}
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_ENV
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Setup SSH Key üîê
        run: |
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Write SSH private key (ensure proper format)
          echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Add server to known hosts
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          # Start SSH agent and add key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/deploy_key

          # Create SSH config for easier connection
          cat > ~/.ssh/config << EOF
          Host deploy-server
            HostName ${{ secrets.VPS_HOST }}
            User ${{ secrets.VPS_USER }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            UserKnownHostsFile ~/.ssh/known_hosts
          EOF
          chmod 600 ~/.ssh/config

      - name: Test SSH Connection üöÄ
        run: |
          echo "Testing SSH connection..."
          ssh deploy-server "echo '‚úÖ SSH connection successful'"
          echo "SSH test completed successfully"

      - name: Create .env file üìÑ
        run: |
          cat <<EOF > .env
          PACKAGE_NAME=${{ env.PACKAGE_NAME }}
          PACKAGE_VERSION=${{ env.PACKAGE_VERSION }}
          DOCKER_USERNAME=${{ env.DOCKER_USERNAME }}
          NODE_ENV=${{ env.NODE_ENV }}
          DATABASE_URL=${{ env.DATABASE_URL }}
          JWT_SECRET=${{ env.JWT_SECRET }}
          JWT_EXPIRES_IN=${{ env.JWT_EXPIRES_IN }}
          BASE_URL=${{ env.BASE_URL }}
          MAIL_USER=${{ env.MAIL_USER }}
          MAIL_PASS=${{ env.MAIL_PASS }}
          SUPER_ADMIN_EMAIL=${{ env.SUPER_ADMIN_EMAIL }}
          SUPER_ADMIN_PASS=${{ env.SUPER_ADMIN_PASS }}
          REDIS_URL=${{ env.REDIS_URL }}
          TWILIO_ACCOUNT_SID=${{ env.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN=${{ env.TWILIO_AUTH_TOKEN }}
          TWILIO_PHONE_NUMBER=${{ env.TWILIO_PHONE_NUMBER }}
          EOF

      - name: Copy Files to Server üì¶
        run: |
          echo "Creating directories on server..."
          ssh deploy-server "mkdir -p ~/${{ env.package_name }} ~/${{ env.package_name }}/scripts"

          echo "Copying deployment files..."
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key docker-compose.yaml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ env.package_name }}/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key .env ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ env.package_name }}/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key Dockerfile ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ env.package_name }}/

          echo "Copying scripts..."
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key scripts/deploy.sh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ env.package_name }}/scripts/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key scripts/health-check.js ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ env.package_name }}/scripts/

          echo "Making scripts executable..."
          ssh deploy-server "chmod +x ~/${{ env.package_name }}/scripts/deploy.sh"

          echo "‚úÖ Files copied successfully"

      - name: Zero-downtime Deployment üöÄ
        env:
          IMAGE_NAME: ${{ env.package_name }}
          IMAGE_VERSION: ${{ env.package_version }}
        run: |
          echo "Starting zero-downtime deployment..."

          ssh deploy-server << 'EOF'
          set -e  # Exit on any error

          cd ~/${{ env.package_name }}

          echo "üèÅ Starting deployment process..."

          # Install Docker Compose CLI if needed
          if [ ! -f ~/.docker/cli-plugins/docker-compose ]; then
            echo "üì¶ Installing Docker Compose..."
            mkdir -p ~/.docker/cli-plugins/
            curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
            chmod +x ~/.docker/cli-plugins/docker-compose
            echo "‚úÖ Docker Compose installed"
          fi

          # Install jq if not already installed
          if ! command -v jq &>/dev/null; then
            echo "üì¶ Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
            echo "‚úÖ jq installed"
          fi

          # Log in to Docker Hub
          echo "üîë Logging into Docker Hub..."
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          # Ensure user has Docker permissions
          echo "üîß Setting up Docker permissions..."
          sudo usermod -aG docker $USER || true

          # Setup firewall rules
          echo "üî• Configuring firewall..."
          sudo ufw allow 5055 || true
          sudo ufw allow 5432 || true  
          sudo ufw allow 6379 || true

          # Pull the new image
          echo "üì• Pulling Docker image: ${{ env.image_tag }}"
          if docker pull ${{ env.image_tag }}; then
            echo "‚úÖ Image pulled successfully"
          else
            echo "‚ùå Failed to pull image"
            exit 1
          fi

          # Check if deploy script exists
          if [ ! -f "./scripts/deploy.sh" ]; then
            echo "‚ùå Deploy script not found!"
            echo "Available files:"
            ls -la scripts/ || echo "No scripts directory"
            exit 1
          fi

          # Make sure script is executable
          chmod +x ./scripts/deploy.sh

          # Execute zero-downtime deployment script
          echo "üöÄ Executing deployment script..."
          if ./scripts/deploy.sh --version ${{ env.package_version }}; then
            echo "‚úÖ Deployment script executed successfully"
          else
            echo "‚ùå Deployment script failed"
            echo "Container status:"
            docker ps -a --filter "name=${{ env.package_name }}" || true
            echo "Recent logs:"
            docker logs --tail 50 "${{ env.package_name }}_app_1" 2>/dev/null || true
            exit 1
          fi

          # Verify containers are running
          echo "üîç Verifying deployment..."
          if docker ps --filter "name=${{ env.package_name }}" | grep -q "${{ env.package_name }}"; then
            echo "‚úÖ Containers are running"
            docker ps --filter "name=${{ env.package_name }}"
          else
            echo "‚ùå No containers found running"
            docker ps -a --filter "name=${{ env.package_name }}"
            exit 1
          fi

          # Log out from Docker Hub
          docker logout

          # Clean up unused Docker objects (only dangling images)
          echo "üßπ Cleaning up unused Docker images..."
          docker image prune -f

          echo "üéâ Deployment completed successfully!"
          EOF

      - name: Verify Deployment ‚úÖ
        run: |
          echo "‚è≥ Waiting for services to stabilize..."
          sleep 15

          echo "üîç Verifying deployment status..."

          ssh deploy-server << 'EOF'
          cd ~/${{ env.package_name }}

          echo "=== Container Status ==="
          docker ps --filter "name=${{ env.package_name }}"

          echo "=== Health Check ==="
          if [ -f "./scripts/deploy.sh" ]; then
            ./scripts/deploy.sh status
          else
            echo "Deploy script not found, checking manually..."
            
            # Try to curl the health endpoint
            if curl -f http://localhost:5055/health 2>/dev/null; then
              echo "‚úÖ Health check passed"
            else
              echo "‚ö†Ô∏è  Health check endpoint not responding"
              echo "Container logs:"
              docker logs --tail 20 "${{ env.package_name }}_app_1" 2>/dev/null || echo "No logs available"
            fi
          fi

          echo "=== Final Status ==="
          if docker ps --filter "name=${{ env.package_name }}" | grep -q "Up"; then
            echo "üéâ Deployment verification successful!"
          else
            echo "‚ùå Deployment verification failed!"
            exit 1
          fi
          EOF

      - name: Cleanup SSH üßπ
        if: always()
        run: |
          # Clean up SSH files
          rm -rf ~/.ssh/deploy_key* ~/.ssh/config
          rm -f .env
