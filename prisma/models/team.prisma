model Team {
  id          String  @id @default(uuid())
  title       String
  description String?
  department  String
  image       String
  creatorId   String
  creator     User    @relation(fields: [creatorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members           TeamMembers[]
  projects          Project[]
  teamSurveys       TeamSurvey[]
  teamAnnouncements TeamAnnouncement[]
  teamMessages      TeamMessage[]
}

model TeamMembers {
  id      String  @id @default(uuid())
  teamId  String
  userId  String
  isAdmin Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId]) // Prevent duplicate membership
}

model TeamSurvey {
  id String @id @default(uuid())

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  survey   Survey @relation(fields: [surveyId], references: [id])
  surveyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamAnnouncement {
  id String @id @default(uuid())

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  announcement   Announcement @relation(fields: [announcementId], references: [id])
  announcementId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TeamMessage {
  id       String  @id @default(uuid())
  content  String
  fileId   String?
  teamId   String
  senderId String

  file   FileInstance? @relation(fields: [fileId], references: [id])
  team   Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  sender User          @relation(fields: [senderId], references: [id], onDelete: Cascade)

  statuses  TeamMessageStatus[]
  createdAt DateTime            @default(now())
}

model TeamMessageStatus {
  id        String                @id @default(uuid())
  messageId String
  userId    String
  status    MessageDeliveryStatus
  updatedAt DateTime              @updatedAt

  message TeamMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

enum MessageDeliveryStatus {
  SENT
  DELIVERED
  READ
}
