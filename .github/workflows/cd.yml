name: üöÄ CD Pipeline with Zero Downtime

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
  push:
    branches:
      # - main
      - sabbir

env:
  # Global environment variables - available to all jobs
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build-and-push:
    name: Build & Push Docker Image üèóÔ∏è
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

    outputs:
      package_name: ${{ steps.extract.outputs.package_name }}
      package_version: ${{ steps.extract.outputs.package_version }}
      image_tag: ${{ steps.extract.outputs.image_tag }}

    steps:
      - name: Checkout Code üì•
        uses: actions/checkout@v4

      - name: Extract Package Info üì¶
        id: extract
        run: |
          # Extract from package.json
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          IMAGE_TAG="${DOCKER_USERNAME}/${PACKAGE_NAME}:${PACKAGE_VERSION}"

          # Debug output
          echo "=== EXTRACTED VALUES ==="
          echo "PACKAGE_NAME: $PACKAGE_NAME"
          echo "PACKAGE_VERSION: $PACKAGE_VERSION"
          echo "IMAGE_TAG: $IMAGE_TAG"
          echo "========================="

          # Set outputs
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub üîë
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Create .env file üìÑ
        run: |
          echo "PACKAGE_VERSION=${{ steps.extract.outputs.package_version }}" >> .env
          echo "PACKAGE_NAME=${{ steps.extract.outputs.package_name }}" >> .env
          echo "DOCKER_USERNAME=$DOCKER_USERNAME" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "MAIL_USER=${{ secrets.MAIL_USER }}" >> .env
          echo "MAIL_PASS=${{ secrets.MAIL_PASS }}" >> .env
          echo "SUPER_ADMIN_EMAIL=${{ secrets.SUPER_ADMIN_EMAIL }}" >> .env
          echo "SUPER_ADMIN_PASS=${{ secrets.SUPER_ADMIN_PASS }}" >> .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          echo "TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}" >> .env
          echo "TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}" >> .env
          echo "TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }}" >> .env

      - name: Build Docker Image üî®
        run: docker compose --profile prod build

      - name: Push Docker Image üöÄ
        run: |
          docker compose --profile prod push
          echo "‚úÖ Docker image ${{ steps.extract.outputs.image_tag }} pushed successfully!"

      - name: Clean up .env üßπ
        if: always()
        run: rm -f .env

  deploy:
    name: Deploy to VPS with Zero Downtime üîÑ
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code üì•
        uses: actions/checkout@v4

      - name: Verify Build Outputs üîç
        run: |
          echo "=== BUILD JOB OUTPUTS ==="
          echo "package_name: ${{ needs.build-and-push.outputs.package_name }}"
          echo "package_version: ${{ needs.build-and-push.outputs.package_version }}"
          echo "image_tag: ${{ needs.build-and-push.outputs.image_tag }}"
          echo "========================="

          # Fail early if any output is empty
          if [ -z "${{ needs.build-and-push.outputs.package_name }}" ]; then
            echo "ERROR: package_name is empty"
            exit 1
          fi

          if [ -z "${{ needs.build-and-push.outputs.package_version }}" ]; then
            echo "ERROR: package_version is empty"
            exit 1
          fi

          if [ -z "${{ needs.build-and-push.outputs.image_tag }}" ]; then
            echo "ERROR: image_tag is empty"
            exit 1
          fi

          echo "‚úÖ All outputs are valid"

      - name: Setup SSH üîê
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

          cat > ~/.ssh/config << EOF
          Host deploy-server
            HostName ${{ secrets.VPS_HOST }}
            User ${{ secrets.VPS_USER }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
          EOF
          chmod 600 ~/.ssh/config

      - name: Test SSH Connection üöÄ
        run: ssh deploy-server "echo 'SSH connection successful'"

      - name: Create .env file üìÑ
        run: |
          echo "PACKAGE_VERSION=${{ needs.build-and-push.outputs.package_version }}" >> .env
          echo "PACKAGE_NAME=${{ needs.build-and-push.outputs.package_name }}" >> .env
          echo "DOCKER_USERNAME=$DOCKER_USERNAME" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "MAIL_USER=${{ secrets.MAIL_USER }}" >> .env
          echo "MAIL_PASS=${{ secrets.MAIL_PASS }}" >> .env
          echo "SUPER_ADMIN_EMAIL=${{ secrets.SUPER_ADMIN_EMAIL }}" >> .env
          echo "SUPER_ADMIN_PASS=${{ secrets.SUPER_ADMIN_PASS }}" >> .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          echo "TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}" >> .env
          echo "TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}" >> .env
          echo "TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }}" >> .env

      - name: Copy Files to Server üì¶
        run: |
          echo "Creating directories..."
          ssh deploy-server "mkdir -p ~/${{ needs.build-and-push.outputs.package_name }}/scripts"

          echo "Copying files..."
          scp -i ~/.ssh/deploy_key docker-compose.yaml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ needs.build-and-push.outputs.package_name }}/
          scp -i ~/.ssh/deploy_key .env ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ needs.build-and-push.outputs.package_name }}/
          scp -i ~/.ssh/deploy_key Dockerfile ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ needs.build-and-push.outputs.package_name }}/
          scp -i ~/.ssh/deploy_key scripts/deploy.sh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ needs.build-and-push.outputs.package_name }}/scripts/
          scp -i ~/.ssh/deploy_key scripts/health-check.js ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ needs.build-and-push.outputs.package_name }}/scripts/

          ssh deploy-server "chmod +x ~/${{ needs.build-and-push.outputs.package_name }}/scripts/deploy.sh"
          echo "‚úÖ Files copied successfully"

      - name: Deploy Application üöÄ
        run: |
          echo "Starting deployment..."
          echo "Package: ${{ needs.build-and-push.outputs.package_name }}"
          echo "Version: ${{ needs.build-and-push.outputs.package_version }}"
          echo "Image: ${{ needs.build-and-push.outputs.image_tag }}"

          ssh deploy-server bash << 'DEPLOY_EOF'
          set -e

          # Set variables (using the exact values from GitHub Actions)
          PACKAGE_NAME="${{ needs.build-and-push.outputs.package_name }}"
          PACKAGE_VERSION="${{ needs.build-and-push.outputs.package_version }}"
          IMAGE_TAG="${{ needs.build-and-push.outputs.image_tag }}"

          echo "=== DEPLOYMENT STARTED ==="
          echo "Package: $PACKAGE_NAME"
          echo "Version: $PACKAGE_VERSION"
          echo "Image: $IMAGE_TAG"
          echo "=============================="

          cd ~/$PACKAGE_NAME

          # Install Docker Compose if needed
          if [ ! -f ~/.docker/cli-plugins/docker-compose ]; then
            echo "Installing Docker Compose..."
            mkdir -p ~/.docker/cli-plugins/
            curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
            chmod +x ~/.docker/cli-plugins/docker-compose
          fi

          # Install jq if needed
          if ! command -v jq &>/dev/null; then
            echo "Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Login to Docker Hub
          echo "Logging into Docker Hub..."
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          # Set Docker permissions
          sudo usermod -aG docker $USER || true

          # Configure firewall
          sudo ufw allow 5055 || true
          sudo ufw allow 5432 || true
          sudo ufw allow 6379 || true

          # Pull the Docker image
          echo "Pulling Docker image: $IMAGE_TAG"
          if docker pull "$IMAGE_TAG"; then
            echo "‚úÖ Image pulled successfully"
          else
            echo "‚ùå Failed to pull image: $IMAGE_TAG"
            exit 1
          fi

          # Verify deploy script exists
          if [ ! -f "./scripts/deploy.sh" ]; then
            echo "‚ùå deploy.sh not found"
            ls -la scripts/ || echo "No scripts directory"
            exit 1
          fi

          # Make script executable
          chmod +x ./scripts/deploy.sh

          # Run deployment
          echo "Executing deployment script..."
          if ./scripts/deploy.sh --version "$PACKAGE_VERSION"; then
            echo "‚úÖ Deployment successful"
          else
            echo "‚ùå Deployment failed"
            echo "Container status:"
            docker ps -a --filter "name=$PACKAGE_NAME"
            echo "Container logs:"
            docker logs --tail 50 "${PACKAGE_NAME}_app_1" 2>/dev/null || echo "No logs"
            exit 1
          fi

          # Verify containers are running
          if docker ps --filter "name=$PACKAGE_NAME" | grep -q "$PACKAGE_NAME"; then
            echo "‚úÖ Containers are running"
            docker ps --filter "name=$PACKAGE_NAME"
          else
            echo "‚ùå No containers running"
            docker ps -a --filter "name=$PACKAGE_NAME"
            exit 1
          fi

          # Cleanup
          docker logout
          docker image prune -f

          echo "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
          DEPLOY_EOF

      - name: Verify Deployment ‚úÖ
        run: |
          echo "Waiting for services to stabilize..."
          sleep 15

          echo "Verifying deployment..."
          ssh deploy-server bash << 'VERIFY_EOF'
          PACKAGE_NAME="${{ needs.build-and-push.outputs.package_name }}"
          cd ~/$PACKAGE_NAME

          echo "=== Container Status ==="
          docker ps --filter "name=$PACKAGE_NAME"

          echo "=== Health Check ==="
          if [ -f "./scripts/deploy.sh" ]; then
            ./scripts/deploy.sh status
          else
            echo "Checking health manually..."
            if curl -f http://localhost:5055/health 2>/dev/null; then
              echo "‚úÖ Health check passed"
            else
              echo "‚ö†Ô∏è Health check failed"
              docker logs --tail 20 "${PACKAGE_NAME}_app_1" 2>/dev/null || echo "No logs"
            fi
          fi

          echo "=== Final Status ==="
          if docker ps --filter "name=$PACKAGE_NAME" | grep -q "Up"; then
            echo "üéâ Deployment verification successful!"
          else
            echo "‚ùå Deployment verification failed!"
            exit 1
          fi
          VERIFY_EOF

      - name: Cleanup üßπ
        if: always()
        run: |
          rm -rf ~/.ssh/deploy_key* ~/.ssh/config
          rm -f .env
