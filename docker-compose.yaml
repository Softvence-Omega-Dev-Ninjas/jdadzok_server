services:
    app:
        profiles:
            - prod
        platform: linux/amd64
        build:
            context: .
            dockerfile: Dockerfile
        image: ${DOCKER_USERNAME}/${PACKAGE_NAME}:${PACKAGE_VERSION}
        container_name: ${PACKAGE_NAME}_api
        ports:
            - "${PORT}:${PORT}"
        env_file:
            - .env
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_healthy
        restart: always
        command: >
            sh -c "
                echo '🏁 Waiting for DB...';
                sleep 5;
                npx prisma migrate deploy;
                echo '🚀 Starting app...';
                pnpm start:docker
            "
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"
        labels:
            - "app.name=${PACKAGE_NAME}"
            - "app.version=${PACKAGE_VERSION}"
            - "deployment.type=zero-downtime"

    db:
        image: postgres:15
        container_name: ${PG_DATABASE}
        restart: always
        profiles:
            - prod
            - dev
        environment:
            POSTGRES_USER: ${PG_USERNAME}
            POSTGRES_PASSWORD: ${PG_PASSWORD}
            POSTGRES_DB: ${PG_DATABASE}
            POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
        volumes:
            - jdadzok_pg:/var/lib/postgresql/data
        ports:
            - "${PG_PORT}:${PG_PORT}"
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "${PG_USERNAME}", "-d", "${PG_DATABASE}"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 15s
    redis:
        image: redis:7-alpine # Use Alpine version for smaller size
        container_name: ${REDIS_CONTAINER}
        restart: always
        profiles:
            - dev
            - prod
        ports:
            - "${REDIS_PORT}:${REDIS_PORT}"
        volumes:
            - jdadzok_redis:/data
        # Add health check for Redis
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 3s
            retries: 5
            start_period: 5s

    nginx:
        profiles:
            - prod
        image: nginx:alpine
        container_name: ${PACKAGE_NAME}_nginx
        depends_on:
            - app
        volumes:
            - ./nginx/conf.d:/etc/nginx/conf.d
            - ./nginx/certbot/www:/var/www/certbot
            - ./nginx/certbot/conf:/etc/letsencrypt
            - ./nginx/selfsigned:/etc/nginx/selfsigned

        ports:
            - "80:80"
            - "443:443"
        networks:
            - default
        restart: always

    certbot:
        profiles:
            - prod
        image: certbot/certbot
        container_name: ${PACKAGE_NAME}_certbot
        volumes:
            - ./nginx/certbot/www:/var/www/certbot
            - ./nginx/certbot/conf:/etc/letsencrypt
        environment:
            - EMAIL=${EMAIL}
            - BASE_URL=${BASE_URL}
        entrypoint: >
            certbot certonly --webroot --webroot-path=/var/www/certbot 
            --email ${EMAIL} --agree-tos --no-eff-email 
            -d ${BASE_URL}
        depends_on:
            - nginx
        networks:
            - default
        restart: "no"

    certbot-renew:
        profiles:
            - prod
        image: certbot/certbot
        container_name: ${PACKAGE_NAME}_certbot_renew
        volumes:
            - ./nginx/certbot/www:/var/www/certbot
            - ./nginx/certbot/conf:/etc/letsencrypt
        entrypoint: >
            sh -c "trap exit TERM; 
                   while :; do 
                     echo '🔄 Checking for SSL renewal...'; 
                     certbot renew --webroot --webroot-path=/var/www/certbot --quiet --deploy-hook 'nginx -s reload'; 
                     sleep 12h; 
                   done"
        depends_on:
            - nginx
        networks:
            - default
        restart: unless-stopped

volumes:
    jdadzok_pg:
    jdadzok_redis:

# Add networks for better isolation (optional)
networks:
    default:
        name: ${PACKAGE_NAME}_network
        labels:
            - "project=${PACKAGE_NAME}"
