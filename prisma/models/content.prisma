model Post {
  id         String         @id @default(uuid())
  authorId   String
  categoryId String?
  text       String
  mediaUrl   String?
  mediaType  MediaType      @default(TEXT)
  visibility PostVisibility @default(PUBLIC)
  metadataId String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  comments   Comment[]
  likes      Like[]
  author     User           @relation(fields: [authorId], references: [id])
  categories Category?      @relation(fields: [categoryId], references: [id])
  metadata   PostMetadata?  @relation(fields: [metadataId], references: [id])
  shares     Share[]

  @@map("posts")
}

model Comment {
  id              String    @id @default(uuid())
  postId          String
  parentCommentId String?
  authorId        String
  text            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation(fields: [authorId], references: [id])
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  post            Post      @relation(fields: [postId], references: [id])
  likes           Like[]

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment? @relation(fields: [commentId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId, commentId])
  @@map("likes")
}

model Share {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@map("shares")
}

model PostMetadata {
  id          String    @id @default(uuid())
  feelings    Feelings  @default(HAPPY)
  check_in_id String?
  gif_id      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  check_in    Location? @relation(fields: [check_in_id], references: [id], onDelete: Cascade)
  gif         Gif?      @relation(fields: [gif_id], references: [id])
  Posts       Post[]
}

model Location {
  id           String         @id @default(uuid())
  name         String
  coordinates  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PostMetadata PostMetadata[]
}

model Gif {
  id           String         @id @default(uuid())
  url          String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PostMetadata PostMetadata[]
}
