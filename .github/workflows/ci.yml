name: CI Pipeline

on:
  push:
    branches:
      - "**" # any branch
  pull_request:
    branches:
      - "**" # whenever a new pr comes

jobs:
  lint-test:
    name: 🧪 CI - Lint, Build, Format, Prisma
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: 📦 Install dependencies
        run: npm install

      - name: 🧹 Run Lint
        run: npm run lint

      - name: ✅ Format Check
        run: npm run format

      - name: 🏗 Build Project
        run: npm run build

      - name: 🔄 Generate Prisma Client
        run: npm run prisma:generate

  build-test:
    name: 🧪 Testing for production building docker image
    runs-on: ubuntu-latest
    needs: lint-test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: Extract Package Name & Version 📦
        id: package
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_ENV
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_ENV

      - name: Create .env file 📄
        run: |
          echo "PACKAGE_VERSION=${{ env.package_version }}" >> .env
          echo "PACKAGE_NAME=${{ env.package_name }}" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "MAIL_USER=${{ secrets.MAIL_USER }}" >> .env
          echo "MAIL_PASS=${{ secrets.MAIL_PASS }}" >> .env
          echo "SUPER_ADMIN_EMAIL=${{ secrets.SUPER_ADMIN_EMAIL }}" >> .env
          echo "SUPER_ADMIN_PASS=${{ secrets.SUPER_ADMIN_PASS }}" >> .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          echo "TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}" >> .env
          echo "TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}" >> .env
          echo "TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }}" >> .env

      - name: Build Docker Image 🔨
        run: |
          docker compose --profile prod build
          echo "✅ Docker image build with version v${{ env.package_version }} success 🤝!"

      - name: Clean up .env 🧹
        if: always()
        run: rm -f .env
