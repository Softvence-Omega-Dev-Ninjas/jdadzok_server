// -----------------------------------
// CONTENT
// -----------------------------------

model Category {
  id String @id @default(uuid())

  name String
  slug String @unique

  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Post {
  id String @id @default(uuid())

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  text       String
  mediaUrl   String?
  mediaType  MediaType      @default(TEXT)
  visibility PostVisibility @default(PUBLIC)

  comments     Comment[]
  likes        Like[]
  shares       Share[]
  postTagUsers PostTagUser[]

  metadata   PostMetadata? @relation(fields: [metadataId], references: [id])
  metadataId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Comment {
  id String @id @default(uuid())

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId String?
  replies         Comment[] @relation("CommentReplies")

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  text  String
  likes Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Like {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId    String?
  post      Post?   @relation(fields: [postId], references: [id])
  commentId String?

  comment Comment? @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId, commentId])
  @@map("likes")
}

model Share {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
  @@map("shares")
}

model PostMetadata {
  id String @id @default(uuid())

  feelings  Feelings  @default(HAPPY)
  checkIn   Location? @relation(fields: [checkInId], references: [id], onDelete: Cascade)
  checkInId String?

  gif   Gif?    @relation(fields: [gifId], references: [id])
  gifId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Posts     Post[]
}

model Location {
  id          String  @id @default(uuid())
  name        String
  coordinates String?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PostMetadata PostMetadata[]
}

model Gif {
  id String @id @default(uuid())

  url String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PostMetadata PostMetadata[]
}
