model Comment {
  id String @id @default(uuid())
  
  // Post this comment belongs to
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Comment author
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Comment content
  text String @db.Text
  // post could be string/video/image
  mediaUrl  String?   // URL for attached media
  mediaType MediaType @default(TEXT)
 
  
  // Nested comments (replies)
  parentCommentId String?
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies         Comment[] @relation("CommentReplies")
  
  // Comment interactions
  likes Like[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("comments")
  @@index([postId])
  @@index([authorId])
  @@index([parentCommentId])
  @@index([createdAt])
}