name: CI Pipeline

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  setup:
    name: ⚙️ Setup Environment
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        uses: ./.github/actions/setup-env

  lint-test:
    name: 🧪 CI - Lint, Build, Format, Prisma
    runs-on: ubuntu-latest
    needs: setup # 👈 Ensures .env is created before this job

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: Load .env values
        uses: ./.github/actions/load-env

      - name: Cat the .env file
        run: cat .env

      - name: Echo package name and version
        run: |
          echo "Package name: $PACKAGE_NAME"
          echo "Package version: $PACKAGE_VERSION"
          echo "✅ Great, we can perfectly access our env"

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: 📦 Install dependencies
        run: npm install

      - name: 🧹 Run Lint
        run: npm run lint

      - name: ✅ Format Check
        run: npm run format

      - name: 🏗 Build Project
        run: npm run build

      - name: 🔄 Generate Prisma Client
        run: npm run prisma:generate

  build-test:
    name: 🧪 Docker Image Build
    runs-on: ubuntu-latest
    needs: lint-test # lint-test already needs setup → this is safe

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: Load .env values
        uses: ./.github/actions/load-env

      - name: Build Docker Image 🔨
        run: |
          docker compose --profile prod build
          echo "✅ Docker image build with version v${{ env.PACKAGE_VERSION }} success 🤝!"

      - name: Clean up .env 🧹
        if: always()
        run: rm -f .env
