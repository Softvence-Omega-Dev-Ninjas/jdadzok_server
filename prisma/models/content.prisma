// -----------------------------------
// CONTENT
// -----------------------------------

model Category {
  id     String  @id @default(cuid())
  name   String
  slug   String  @unique
  posts  Post[]
}

model Post {
  id          String       @id @default(cuid())
  authorId    String
  author      User         @relation(fields: [authorId], references: [id])
  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id])
  text        String?
  mediaUrl    String?
  mediaType   MediaType
  visibility  PostVisibility @default(PUBLIC)
  comments    Comment[]
  likes       Like[]
  shares      Share[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Comment {
  id             String    @id @default(cuid())
  postId         String
  post           Post      @relation(fields: [postId], references: [id])
  parentCommentId String?
  parentComment   Comment? @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  authorId       String
  author         User      @relation(fields: [authorId], references: [id])
  text           String
  likes          Like[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Like {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  postId     String?
  post       Post?    @relation(fields: [postId], references: [id])
  commentId  String?
  comment    Comment? @relation(fields: [commentId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([userId, postId, commentId])
}

model Share {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}