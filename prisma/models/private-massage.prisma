model PrivateMessage {
  id             String  @id @default(uuid())
  content        String
  conversationId String
  senderId       String
  fileId         String?

  file         FileInstance?       @relation(fields: [fileId], references: [id])
  conversation PrivateConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User                @relation(fields: [senderId], references: [id], onDelete: Cascade)

  statuses  PrivateMessageStatus[]
  createdAt DateTime               @default(now())
}

model PrivateConversation {
  id      String @id @default(uuid())
  user1Id String
  user2Id String

  user1 User @relation("User1Conversations", fields: [user1Id], references: [id], onDelete: Cascade)
  user2 User @relation("User2Conversations", fields: [user2Id], references: [id], onDelete: Cascade)

  messages  PrivateMessage[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([user1Id, user2Id]) // prevent duplicates (A-B same as B-A)
}

model PrivateMessageStatus {
  id        String                @id @default(uuid())
  messageId String
  userId    String
  status    MessageDeliveryStatus
  updatedAt DateTime              @updatedAt

  message PrivateMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}
