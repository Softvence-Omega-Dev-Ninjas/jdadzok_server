services:
    app:
        profiles:
            - prod
        platform: linux/amd64
        build:
            context: .
        image: ${DOCKER_USERNAME}/${PACKAGE_NAME}:latest
        container_name: ${PACKAGE_NAME}
        ports:
            - ${PORT}:${PORT}
        env_file:
            - .env
        command: >
            sh -c "
              echo 'üèÅ Waiting for DB...';
              sleep 5;
              npx prisma migrate deploy;
              echo 'üöÄ Starting app...';
              npm run start:docker
              "
        depends_on:
            db:
                condition: service_healthy
        restart: unless-stopped
        # Enhanced health check for better zero-downtime deployment
        healthcheck:
            disable: true
        volumes:
            - files-data:/app/uploads

    db:
        image: postgres:17
        restart: always
        profiles:
            - dev
            - prod
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_DB=mydb
        ports:
            - 5433:5432
        volumes:
            - pg:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD", "pg_isready", "-U", postgres, "-d", mydb]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 15s

    redis:
        image: redis:7-alpine # Use Alpine version for smaller size
        container_name: redis
        restart: always
        profiles:
            - dev
            - prod
        ports:
            - 6380:6379
        volumes:
            - redis:/data
        # Add health check for Redis
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 3s
            retries: 5
            start_period: 5s

    caddy:
        image: caddy:latest
        profiles:
            - prod
        container_name: caddy_server
        restart: unless-stopped
        depends_on:
            - db
            - redis
            - app
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - /var/www:/var/www
            - ./Caddyfile:/etc/caddy/Caddyfile
            - caddy_data:/data
            - caddy_config:/config

volumes:
    redis:
    pg:
    caddy_data:
    caddy_config:
    files-data:
networks:
    default:
