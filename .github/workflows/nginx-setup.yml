name: 🚀 Deploy NGINX HTTPS Reverse Proxy 🔐

on:
  workflow_run:
    workflows: ["🚀 CD Pipeline with Zero Downtime"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🧠 Extract the package name
        id: package
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "📦 PACKAGE_NAME: $PACKAGE_NAME"
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "✅ Outputs written to GITHUB_OUTPUT"

      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

          cat > ~/.ssh/config << EOF
          Host deploy-server
            HostName ${{ secrets.VPS_HOST }}
            User ${{ secrets.VPS_USER }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
          EOF
          chmod 600 ~/.ssh/config

      - name: 🚀 Test SSH Connection
        run: ssh deploy-server "echo '✅ SSH connection successful'"

      - name: ⚙️ Prepare and update NGINX .env values on VPS
        run: |
          echo "🛠 Updating NGINX-related env vars on VPS"

          ssh deploy-server "bash -s" <<EOF
            set -e

            cd ~/${{ steps.package.outputs.package_name }}
            touch .env

            update_var() {
              KEY=\$1
              VALUE=\$2
              if grep -qE "^\\\$KEY=" .env; then
                sed -i "s|^\\\$KEY=.*|\\\$KEY=\\\$VALUE|" .env
                echo "🔄 Updated: \$KEY"
              else
                echo "\$KEY=\$VALUE" >> .env
                echo "➕ Added: \$KEY"
              fi
            }

            update_var BASE_URL "${{ secrets.BASE_URL }}"
            update_var EMAIL "${{ secrets.EMAIL }}"
            update_var DOCKER_USERNAME "${{ secrets.DOCKER_USERNAME }}"

            echo "✅ .env updated on VPS"
          EOF

      - name: 📁 Debug scripts directory
        run: ls -al ./scripts

      - name: 🧪 Run NGINX Setup Script on VPS
        run: |
          echo "🚀 Preparing to run setup-nginx.sh on VPS"

          PACKAGE_NAME=${{ steps.package.outputs.package_name }}

          ssh deploy-server "bash -s" <<EOF
            set -e
            cd ~/\$PACKAGE_NAME

            for file in scripts/generate-self-signed-cert.sh scripts/setup-nginx.sh; do
              if [ ! -f "$file" ]; then
                echo "❌ $file not found. Will copy from runner."
                exit 10
              else
                echo "✅ $(basename "$file") found on VPS"
              fi
            done
          EOF

          # Check exit code; if 10, then copy scripts directory
          if [ $? -eq 10 ]; then
            echo "📤 Copying scripts directory to VPS..."
            scp -r ./scripts deploy-server:~/${{ steps.package.outputs.package_name }}/
          fi

          echo "🔐 Generate CERT"
          ssh deploy-server "cd ~/${{ steps.package.outputs.package_name }}/scripts && chmod +x generate-self-signed-cert.sh && ./generate-self-signed-cert.sh"

          echo "🚀 Running setup-nginx.sh on VPS..."
          ssh deploy-server "cd ~/${{ steps.package.outputs.package_name }}/scripts && chmod +x setup-nginx.sh && ./setup-nginx.sh"
