name: üöÄ CD Pipeline with Zero Downtime

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
  push:
    branches:
      # - main
      - sabbir

jobs:
  build-and-push:
    name: Build & Push Docker Image üèóÔ∏è
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

    outputs:
      package_name: ${{ steps.package.outputs.package_name }}
      package_version: ${{ steps.package.outputs.package_version }}
      image_tag: ${{ steps.package.outputs.image_tag }}

    steps:
      - name: Checkout Code üì•
        uses: actions/checkout@v4

      - name: Log in to Docker Hub üîë
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Extract Package Name & Version üì¶
        id: package
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/${PACKAGE_NAME}:${PACKAGE_VERSION}"

          # For outputs (used by other jobs)
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

          # For current job env
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_ENV
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Create .env file üìÑ
        run: |
          echo "PACKAGE_VERSION=${{ env.package_version }}" >> .env
          echo "PACKAGE_NAME=${{ env.package_name }}" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "MAIL_USER=${{ secrets.MAIL_USER }}" >> .env
          echo "MAIL_PASS=${{ secrets.MAIL_PASS }}" >> .env
          echo "SUPER_ADMIN_EMAIL=${{ secrets.SUPER_ADMIN_EMAIL }}" >> .env
          echo "SUPER_ADMIN_PASS=${{ secrets.SUPER_ADMIN_PASS }}" >> .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          echo "TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}" >> .env
          echo "TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}" >> .env
          echo "TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }}" >> .env

      - name: Build Docker Image üî®
        run: docker compose --profile prod build

      - name: Push Docker Image üöÄ
        run: |
          docker compose --profile prod push
          echo "‚úÖ Docker image ${{ env.image_tag }} pushed successfully!"

      - name: Clean up .env üßπ
        if: always()
        run: rm -f .env

  deploy:
    name: Deploy to the VPS with Zero Downtime üîÑ
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: ${{ needs.build-and-push.outputs.package_name }}
      PACKAGE_VERSION: ${{ needs.build-and-push.outputs.package_version }}
      IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}

    steps:
      - name: Checkout Code üì•
        uses: actions/checkout@v4

      - name: Extract Package Info üì¶
        id: package
        run: |
          PACKAGE_NAME=${{ needs.build-and-push.outputs.package_name }}
          PACKAGE_VERSION=${{ needs.build-and-push.outputs.package_version }}
          IMAGE_TAG=${{ needs.build-and-push.outputs.image_tag }}
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_ENV
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Debug Image Tag üêõ
        run: |
          echo "Image tag is: ${{ env.image_tag }}"

      - name: Setup SSH Key üîê
        run: |
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Write SSH private key (ensure proper format)
          echo "${{ secrets.VPS_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Add server to known hosts
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          # Start SSH agent and add key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/deploy_key

          # Create SSH config for easier connection
          cat > ~/.ssh/config << EOF
          Host deploy-server
            HostName ${{ secrets.VPS_HOST }}
            User ${{ secrets.VPS_USER }}
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            UserKnownHostsFile ~/.ssh/known_hosts
          EOF
          chmod 600 ~/.ssh/config

      - name: Test SSH Connection üöÄ
        run: |
          echo "Testing SSH connection..."
          ssh deploy-server "echo '‚úÖ SSH connection successful'"
          echo "SSH test completed successfully"

      - name: Create .env file üìÑ
        run: |
          echo "PACKAGE_VERSION=${{ env.package_version }}" >> .env
          echo "PACKAGE_NAME=${{ env.package_name }}" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }}" >> .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "MAIL_USER=${{ secrets.MAIL_USER }}" >> .env
          echo "MAIL_PASS=${{ secrets.MAIL_PASS }}" >> .env
          echo "SUPER_ADMIN_EMAIL=${{ secrets.SUPER_ADMIN_EMAIL }}" >> .env
          echo "SUPER_ADMIN_PASS=${{ secrets.SUPER_ADMIN_PASS }}" >> .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          echo "TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}" >> .env
          echo "TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}" >> .env
          echo "TWILIO_PHONE_NUMBER=${{ secrets.TWILIO_PHONE_NUMBER }}" >> .env

      - name: Copy Files to Server üì¶
        run: |
          echo "Creating directories on server..."
          ssh deploy-server "mkdir -p ~/${{ env.package_name }} ~/${{ env.package_name }}/scripts"

          echo "Copying deployment files..."
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key docker-compose.yaml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ env.package_name }}/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key .env ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ env.package_name }}/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key Dockerfile ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ env.package_name }}/

          echo "Copying scripts..."
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key scripts/deploy.sh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ env.package_name }}/scripts/
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key scripts/health-check.js ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/${{ env.package_name }}/scripts/

          echo "Making scripts executable..."
          ssh deploy-server "chmod +x ~/${{ env.package_name }}/scripts/deploy.sh"

          echo "‚úÖ Files copied successfully"

      - name: Zero-downtime Deployment üöÄ
        env:
          IMAGE_TAG: ${{ env.image_tag }}
          PACKAGE_NAME: ${{ env.package_name }}
          PACKAGE_VERSION: ${{ env.package_version }}
        run: |
          echo "üì¶ Setting variables..."
          PACKAGE_NAME="${{ env.package_name }}"
          PACKAGE_VERSION="${{ env.package_version }}"
          IMAGE_TAG="${{ env.image_tag }}"

          echo "üöÄ Starting deployment on remote server..."

          ssh deploy-server <<EOF
          set -euo pipefail

          echo "‚úÖ Connected to server"
          cd ~/\$PACKAGE_NAME

          echo "üèÅ Beginning deployment process..."

          # Ensure Docker Compose CLI exists
          if [ ! -f ~/.docker/cli-plugins/docker-compose ]; then
            echo "üì¶ Installing Docker Compose CLI..."
            mkdir -p ~/.docker/cli-plugins/
            curl -sSL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
            chmod +x ~/.docker/cli-plugins/docker-compose
            echo "‚úÖ Docker Compose installed"
          fi

          # Ensure jq is installed
          if ! command -v jq &>/dev/null; then
            echo "üì¶ Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Docker login
          echo "üîê Logging into Docker Hub..."
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          # Ensure Docker permissions
          echo "üîß Adding user to docker group (if needed)..."
          sudo usermod -aG docker \$USER || true

          # UFW rules (optional but helpful)
          echo "üî• Configuring firewall rules (if UFW enabled)..."
          sudo ufw allow 5055 || true
          sudo ufw allow 5432 || true
          sudo ufw allow 6379 || true

          echo "üì• Pulling latest Docker image: \$IMAGE_TAG"
          if docker pull \$IMAGE_TAG; then
            echo "‚úÖ Docker image pulled"
          else
            echo "‚ùå Failed to pull Docker image"
            exit 1
          fi

          echo "üîç Checking for deploy.sh..."
          if [ ! -f "./scripts/deploy.sh" ]; then
            echo "‚ùå deploy.sh not found!"
            ls -la ./scripts || echo "No scripts directory found"
            exit 1
          fi

          echo "üö¶ Making script executable..."
          chmod +x ./scripts/deploy.sh

          echo "üöÄ Executing deploy.sh with version \$PACKAGE_VERSION..."
          if ./scripts/deploy.sh --version \$PACKAGE_VERSION; then
            echo "‚úÖ deploy.sh executed successfully"
          else
            echo "‚ùå deploy.sh failed"
            echo "üì¶ Container status:"
            docker ps -a --filter "name=\$PACKAGE_NAME" || true

            echo "üßæ Logs from app container:"
            docker logs --tail 50 "\${PACKAGE_NAME}_app_1" 2>/dev/null || echo "No logs available"
            exit 1
          fi

          echo "üîç Verifying running containers..."
          if docker ps --filter "name=\$PACKAGE_NAME" | grep -q "\$PACKAGE_NAME"; then
            echo "‚úÖ App container is running"
            docker ps --filter "name=\$PACKAGE_NAME"
          else
            echo "‚ùå No running containers found for \$PACKAGE_NAME"
            docker ps -a --filter "name=\$PACKAGE_NAME"
            exit 1
          fi

          echo "üîí Logging out from Docker"
          docker logout

          echo "üßπ Pruning unused Docker images (dangling only)..."
          docker image prune -f

          echo "üéâ Deployment completed successfully!"
          EOF

      - name: Verify Deployment ‚úÖ
        run: |
          echo "‚è≥ Waiting for services to stabilize..."
          sleep 15

          echo "üîç Verifying deployment status..."

          ssh deploy-server << EOF
          # Set variables from GitHub Actions
          PACKAGE_NAME="${{ env.package_name }}"
          PACKAGE_VERSION="${{ env.package_version }}"

          cd ~/\$PACKAGE_NAME

          echo "=== Container Status ==="
          docker ps --filter "name=\$PACKAGE_NAME"

          echo "=== Health Check ==="
          if [ -f "./scripts/deploy.sh" ]; then
            ./scripts/deploy.sh status
          else
            echo "Deploy script not found, checking manually..."
            
            # Try to curl the health endpoint
            if curl -f http://localhost:5055/health 2>/dev/null; then
              echo "‚úÖ Health check passed"
            else
              echo "‚ö†Ô∏è  Health check endpoint not responding"
              echo "Container logs:"
              docker logs --tail 20 "\${PACKAGE_NAME}_app_1" 2>/dev/null || echo "No logs available"
            fi
          fi

          echo "=== Final Status ==="
          if docker ps --filter "name=\$PACKAGE_NAME" | grep -q "Up"; then
            echo "üéâ Deployment verification successful!"
          else
            echo "‚ùå Deployment verification failed!"
            exit 1
          fi
          EOF

      - name: Cleanup SSH üßπ
        if: always()
        run: |
          # Clean up SSH files
          rm -rf ~/.ssh/deploy_key* ~/.ssh/config
          rm -f .env
